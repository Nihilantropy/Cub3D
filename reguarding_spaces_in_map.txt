Looking at the subject carefully, there are some key points about spaces in the map:

From the subject:

"Except for the map content which always has to be the last, each type of element can be separated by one or more empty line(s)."

"The map must be parsed as it looks in the file. Spaces are a valid part of the map and are up to you to handle. You must be able to parse any kind of map, as long as it respects the rules of the map."
Also, the subject states:

"The map must be composed of only 6 possible characters: 0 for an empty space, 1 for a wall, and N,S,E or W for the player's start position and spawning orientation."
Most importantly:

"The map must be closed/surrounded by walls, if not the program must return an error."
Given these requirements, I believe that spaces in the map should generate an error, not be treated as floor cells ('0'). Here's why:

The subject explicitly states that the map must be composed of "only 6 possible characters" (0,1,N,S,E,W).
Space is not one of these characters.
While the subject says "spaces are a valid part of the map", this likely refers to spaces AROUND the map for formatting, not INSIDE the map.
The example map in the subject shows spaces only around the map, never within the actual play area.
Treating spaces as valid paths would make it very difficult to ensure the map is "closed/surrounded by walls" as required.
Therefore, any space found within the actual map boundaries (between walls) should generate an error. Spaces should only be valid outside the map for formatting purposes.

